package com.queen.rxjava2withretrofitdemo.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.queen.rxjava2withretrofitdemo.greenDaoEntity.GreenDoubanAvatar;
import com.queen.rxjava2withretrofitdemo.greenDaoEntity.GreenDoubanRating;

import com.queen.rxjava2withretrofitdemo.greenDaoEntity.GreenDoubanMovieSubject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GREEN_DOUBAN_MOVIE_SUBJECT".
*/
public class GreenDoubanMovieSubjectDao extends AbstractDao<GreenDoubanMovieSubject, Long> {

    public static final String TABLENAME = "GREEN_DOUBAN_MOVIE_SUBJECT";

    /**
     * Properties of entity GreenDoubanMovieSubject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GId = new Property(0, Long.class, "gId", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Alt = new Property(2, String.class, "alt", false, "ALT");
        public final static Property Year = new Property(3, String.class, "year", false, "YEAR");
        public final static Property DoubanRatingId = new Property(4, Long.class, "doubanRatingId", false, "DOUBAN_RATING_ID");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Original_title = new Property(6, String.class, "original_title", false, "ORIGINAL_TITLE");
        public final static Property Collect_count = new Property(7, int.class, "collect_count", false, "COLLECT_COUNT");
        public final static Property Subtype = new Property(8, String.class, "subtype", false, "SUBTYPE");
        public final static Property DoubanAvatarId = new Property(9, Long.class, "doubanAvatarId", false, "DOUBAN_AVATAR_ID");
    }

    private DaoSession daoSession;


    public GreenDoubanMovieSubjectDao(DaoConfig config) {
        super(config);
    }
    
    public GreenDoubanMovieSubjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GREEN_DOUBAN_MOVIE_SUBJECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: gId
                "\"ID\" TEXT," + // 1: id
                "\"ALT\" TEXT," + // 2: alt
                "\"YEAR\" TEXT," + // 3: year
                "\"DOUBAN_RATING_ID\" INTEGER," + // 4: doubanRatingId
                "\"TITLE\" TEXT," + // 5: title
                "\"ORIGINAL_TITLE\" TEXT," + // 6: original_title
                "\"COLLECT_COUNT\" INTEGER NOT NULL ," + // 7: collect_count
                "\"SUBTYPE\" TEXT," + // 8: subtype
                "\"DOUBAN_AVATAR_ID\" INTEGER);"); // 9: doubanAvatarId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GREEN_DOUBAN_MOVIE_SUBJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GreenDoubanMovieSubject entity) {
        stmt.clearBindings();
 
        Long gId = entity.getGId();
        if (gId != null) {
            stmt.bindLong(1, gId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String alt = entity.getAlt();
        if (alt != null) {
            stmt.bindString(3, alt);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(4, year);
        }
 
        Long doubanRatingId = entity.getDoubanRatingId();
        if (doubanRatingId != null) {
            stmt.bindLong(5, doubanRatingId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String original_title = entity.getOriginal_title();
        if (original_title != null) {
            stmt.bindString(7, original_title);
        }
        stmt.bindLong(8, entity.getCollect_count());
 
        String subtype = entity.getSubtype();
        if (subtype != null) {
            stmt.bindString(9, subtype);
        }
 
        Long doubanAvatarId = entity.getDoubanAvatarId();
        if (doubanAvatarId != null) {
            stmt.bindLong(10, doubanAvatarId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GreenDoubanMovieSubject entity) {
        stmt.clearBindings();
 
        Long gId = entity.getGId();
        if (gId != null) {
            stmt.bindLong(1, gId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String alt = entity.getAlt();
        if (alt != null) {
            stmt.bindString(3, alt);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(4, year);
        }
 
        Long doubanRatingId = entity.getDoubanRatingId();
        if (doubanRatingId != null) {
            stmt.bindLong(5, doubanRatingId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String original_title = entity.getOriginal_title();
        if (original_title != null) {
            stmt.bindString(7, original_title);
        }
        stmt.bindLong(8, entity.getCollect_count());
 
        String subtype = entity.getSubtype();
        if (subtype != null) {
            stmt.bindString(9, subtype);
        }
 
        Long doubanAvatarId = entity.getDoubanAvatarId();
        if (doubanAvatarId != null) {
            stmt.bindLong(10, doubanAvatarId);
        }
    }

    @Override
    protected final void attachEntity(GreenDoubanMovieSubject entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GreenDoubanMovieSubject readEntity(Cursor cursor, int offset) {
        GreenDoubanMovieSubject entity = new GreenDoubanMovieSubject( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // gId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // alt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // year
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // doubanRatingId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // original_title
            cursor.getInt(offset + 7), // collect_count
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // subtype
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // doubanAvatarId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GreenDoubanMovieSubject entity, int offset) {
        entity.setGId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAlt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setYear(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDoubanRatingId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOriginal_title(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCollect_count(cursor.getInt(offset + 7));
        entity.setSubtype(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDoubanAvatarId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GreenDoubanMovieSubject entity, long rowId) {
        entity.setGId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GreenDoubanMovieSubject entity) {
        if(entity != null) {
            return entity.getGId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GreenDoubanMovieSubject entity) {
        return entity.getGId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGreenDoubanRatingDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getGreenDoubanAvatarDao().getAllColumns());
            builder.append(" FROM GREEN_DOUBAN_MOVIE_SUBJECT T");
            builder.append(" LEFT JOIN GREEN_DOUBAN_RATING T0 ON T.\"DOUBAN_RATING_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN GREEN_DOUBAN_AVATAR T1 ON T.\"DOUBAN_AVATAR_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected GreenDoubanMovieSubject loadCurrentDeep(Cursor cursor, boolean lock) {
        GreenDoubanMovieSubject entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        GreenDoubanRating rating = loadCurrentOther(daoSession.getGreenDoubanRatingDao(), cursor, offset);
        entity.setRating(rating);
        offset += daoSession.getGreenDoubanRatingDao().getAllColumns().length;

        GreenDoubanAvatar images = loadCurrentOther(daoSession.getGreenDoubanAvatarDao(), cursor, offset);
        entity.setImages(images);

        return entity;    
    }

    public GreenDoubanMovieSubject loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<GreenDoubanMovieSubject> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<GreenDoubanMovieSubject> list = new ArrayList<GreenDoubanMovieSubject>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<GreenDoubanMovieSubject> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<GreenDoubanMovieSubject> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
