package com.queen.rxjava2withretrofitdemo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.queen.rxjava2withretrofitdemo.greenDaoEntity.GreenDoubanAvatar;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GREEN_DOUBAN_AVATAR".
*/
public class GreenDoubanAvatarDao extends AbstractDao<GreenDoubanAvatar, Long> {

    public static final String TABLENAME = "GREEN_DOUBAN_AVATAR";

    /**
     * Properties of entity GreenDoubanAvatar.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GId = new Property(0, Long.class, "gId", true, "_id");
        public final static Property Small = new Property(1, String.class, "small", false, "SMALL");
        public final static Property Large = new Property(2, String.class, "large", false, "LARGE");
        public final static Property Medium = new Property(3, String.class, "medium", false, "MEDIUM");
    }


    public GreenDoubanAvatarDao(DaoConfig config) {
        super(config);
    }
    
    public GreenDoubanAvatarDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GREEN_DOUBAN_AVATAR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: gId
                "\"SMALL\" TEXT," + // 1: small
                "\"LARGE\" TEXT," + // 2: large
                "\"MEDIUM\" TEXT);"); // 3: medium
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GREEN_DOUBAN_AVATAR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GreenDoubanAvatar entity) {
        stmt.clearBindings();
 
        Long gId = entity.getGId();
        if (gId != null) {
            stmt.bindLong(1, gId);
        }
 
        String small = entity.getSmall();
        if (small != null) {
            stmt.bindString(2, small);
        }
 
        String large = entity.getLarge();
        if (large != null) {
            stmt.bindString(3, large);
        }
 
        String medium = entity.getMedium();
        if (medium != null) {
            stmt.bindString(4, medium);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GreenDoubanAvatar entity) {
        stmt.clearBindings();
 
        Long gId = entity.getGId();
        if (gId != null) {
            stmt.bindLong(1, gId);
        }
 
        String small = entity.getSmall();
        if (small != null) {
            stmt.bindString(2, small);
        }
 
        String large = entity.getLarge();
        if (large != null) {
            stmt.bindString(3, large);
        }
 
        String medium = entity.getMedium();
        if (medium != null) {
            stmt.bindString(4, medium);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GreenDoubanAvatar readEntity(Cursor cursor, int offset) {
        GreenDoubanAvatar entity = new GreenDoubanAvatar( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // gId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // small
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // large
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // medium
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GreenDoubanAvatar entity, int offset) {
        entity.setGId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSmall(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLarge(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMedium(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GreenDoubanAvatar entity, long rowId) {
        entity.setGId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GreenDoubanAvatar entity) {
        if(entity != null) {
            return entity.getGId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GreenDoubanAvatar entity) {
        return entity.getGId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
