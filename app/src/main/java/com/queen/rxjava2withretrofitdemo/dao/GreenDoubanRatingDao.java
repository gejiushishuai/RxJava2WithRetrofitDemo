package com.queen.rxjava2withretrofitdemo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.queen.rxjava2withretrofitdemo.greenDaoEntity.GreenDoubanRating;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GREEN_DOUBAN_RATING".
*/
public class GreenDoubanRatingDao extends AbstractDao<GreenDoubanRating, Long> {

    public static final String TABLENAME = "GREEN_DOUBAN_RATING";

    /**
     * Properties of entity GreenDoubanRating.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GId = new Property(0, Long.class, "gId", true, "_id");
        public final static Property Max = new Property(1, int.class, "max", false, "MAX");
        public final static Property Average = new Property(2, float.class, "average", false, "AVERAGE");
        public final static Property Stars = new Property(3, String.class, "stars", false, "STARS");
        public final static Property Min = new Property(4, int.class, "min", false, "MIN");
    }


    public GreenDoubanRatingDao(DaoConfig config) {
        super(config);
    }
    
    public GreenDoubanRatingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GREEN_DOUBAN_RATING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: gId
                "\"MAX\" INTEGER NOT NULL ," + // 1: max
                "\"AVERAGE\" REAL NOT NULL ," + // 2: average
                "\"STARS\" TEXT," + // 3: stars
                "\"MIN\" INTEGER NOT NULL );"); // 4: min
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GREEN_DOUBAN_RATING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GreenDoubanRating entity) {
        stmt.clearBindings();
 
        Long gId = entity.getGId();
        if (gId != null) {
            stmt.bindLong(1, gId);
        }
        stmt.bindLong(2, entity.getMax());
        stmt.bindDouble(3, entity.getAverage());
 
        String stars = entity.getStars();
        if (stars != null) {
            stmt.bindString(4, stars);
        }
        stmt.bindLong(5, entity.getMin());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GreenDoubanRating entity) {
        stmt.clearBindings();
 
        Long gId = entity.getGId();
        if (gId != null) {
            stmt.bindLong(1, gId);
        }
        stmt.bindLong(2, entity.getMax());
        stmt.bindDouble(3, entity.getAverage());
 
        String stars = entity.getStars();
        if (stars != null) {
            stmt.bindString(4, stars);
        }
        stmt.bindLong(5, entity.getMin());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GreenDoubanRating readEntity(Cursor cursor, int offset) {
        GreenDoubanRating entity = new GreenDoubanRating( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // gId
            cursor.getInt(offset + 1), // max
            cursor.getFloat(offset + 2), // average
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // stars
            cursor.getInt(offset + 4) // min
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GreenDoubanRating entity, int offset) {
        entity.setGId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMax(cursor.getInt(offset + 1));
        entity.setAverage(cursor.getFloat(offset + 2));
        entity.setStars(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMin(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GreenDoubanRating entity, long rowId) {
        entity.setGId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GreenDoubanRating entity) {
        if(entity != null) {
            return entity.getGId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GreenDoubanRating entity) {
        return entity.getGId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
